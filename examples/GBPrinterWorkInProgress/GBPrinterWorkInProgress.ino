/* This is based on the works of Miles Burton and the furrtek gang/guy.
 * I made this a library for easier integration into sketches
 * TODO: 
 * TextToPrint ( thats what the alphabet array is for)
 * 
 * 
 * Byte1 0x0101 0101
 * Byte2 0x0011 0011
 * color   0123 0123
 * 
 * http://www.milesburton.com/Gameboy_Printer_with_Arduino
 */
 
#include <GBPrinter.h>

//uint8_t c,b,cmd,repl,buffer[64];
uint8_t cmd;
uint16_t CRC;

uint8_t row[640] = { // 16 * 40 each row is a tile row
  0xEF, 0xFF, 0xF7, 0xF7, 0xE7, 0xB7, 0xC3, 0xC3, 0xF1, 0xE1, 0xFA, 0xFA, 0xFC, 0xFC, 0xFC, 0xFC, 0xFE, 0xFF, 0xFD, 0xFD, 0xFC, 0xFC, 0xF8, 0xF8, 0xF1, 0xB0, 0x0B, 0x0B, 0x07, 0x07, 0x07, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xBF, 0xBF, 0x7F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x7F, 0x7F, 0x7F, 0x4E, 0x16, 0x25, 0x65, 0x67, 0x66, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x1C, 0x1E, 0xC9, 0xCC, 0x09, 0x89, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF3, 0xF3, 0xF3, 0xF3, 0x33, 0x73, 0x92, 0x92, 0xF0, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x30, 0x30, 0x6E, 0x6E, 0xF8, 0x74, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xFC, 0xFC, 0xFC, 0xE4, 0xE0, 0x48, 0x64, 0x4C, 0x4C, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC2, 0xC2, 0xB9, 0xB8, 0xE1, 0xD0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x73, 0x73, 0x67, 0x33, 0x27, 0x37, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x87, 0xCF, 0xB3, 0x12, 0x3E, 0x3E, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x1C, 0x8C, 0x6C, 0x04, 0x64, 0x64, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x99, 0x01, 0x44, 0xCC, 0xCC, 0xCC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xBF, 0xFF, 0xDF, 0xDF, 0x9F, 0xDF, 0x0F, 0x0F, 0xC7, 0x86, 0xE8, 0xE8, 0xF0, 0xF0, 0xF0, 0xF0, 0xFB, 0xFF, 0xF7, 0xF7, 0xF2, 0xF2, 0xE1, 0xE1, 0xC7, 0xC3, 0x2F, 0x2F, 0x1F, 0x1F, 0x1F, 0x1F, 0xFD, 0xFF, 0xFD, 0xFD, 0xFC, 0xFC, 0xF2, 0xF2, 0xC2, 0xC2, 0xE7, 0xA7, 0xF7, 0xF7, 0xEF, 0xEF, 0xB7, 0xBF, 0x17, 0x17, 0x47, 0x47, 0x09, 0x09, 0x28, 0x28, 0xFC, 0xFC, 0xFD, 0xFD, 0xFE, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x7F, 0xBF, 0xBF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x66, 0x64, 0x64, 0x64, 0x64, 0x64, 0x66, 0x64, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x49, 0xC9, 0xC9, 0xC9, 0xCD, 0x08, 0x0C, 0x4E, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0xF0, 0xF3, 0xF0, 0x93, 0x13, 0x33, 0x73, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x72, 0xE6, 0x66, 0x26, 0x26, 0x60, 0x30, 0x92, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x4C, 0x4C, 0x4C, 0x4C, 0x48, 0x64, 0x64, 0x70, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC9, 0x99, 0x99, 0x99, 0x99, 0x81, 0xC1, 0x89, 0xFF, 0xFF, 0xFE, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0x27, 0x27, 0x07, 0xAF, 0x89, 0x09, 0x89, 0x89, 0x9F, 0x9F, 0x3F, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0x3E, 0x3E, 0x3E, 0x3E, 0xB3, 0x02, 0x87, 0xCF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x64, 0x64, 0x64, 0x64, 0x4C, 0x24, 0x1C, 0x8C, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xF6, 0xFE, 0xF4, 0xF4, 0xF1, 0xF1, 0xC8, 0xC8, 0x08, 0x08, 0x9F, 0x9F, 0xDF, 0xDF, 0xBF, 0xBF, 0xDF, 0xFF, 0x5F, 0x5F, 0x1F, 0x1F, 0x27, 0x27, 0xA1, 0xA1, 0xF2, 0xF2, 0xF7, 0xF7, 0xFB, 0xFB, 
};


uint8_t alphabet[130] = {
  0x00111111, 0x01001000, 0x01001000, 0x01001000, 0x00111111, // A
  0x01111111, 0x01001001, 0x01001001, 0x01001001, 0x00110110, // B
  0x00111110, 0x01000001, 0x01000001, 0x01000001, 0x00100010, // C
  0x01111111, 0x01000001, 0x01000001, 0x01000001, 0x00111110, // D
  0x01111111, 0x01001001, 0x01001001, 0x01001001, 0x01000001, // E
  0x01111111, 0x01001000, 0x01001000, 0x01001000, 0x01000000, // F
  0x00111110, 0x01000001, 0x01000001, 0x01001001, 0x00101110, // G
  0x01111111, 0x00001000, 0x00001000, 0x00001000, 0x01111111, // H
  0x01000001, 0x01000001, 0x01111111, 0x01000001, 0x01000001, // I
  0x01000010, 0x01000001, 0x01000001, 0x01000001, 0x01111110, // J
  0x01111111, 0x00001000, 0x00010100, 0x00100010, 0x01000001, // K
  0x01111111, 0x00000001, 0x00000001, 0x00000001, 0x00000001, // L
  0x01111111, 0x00100000, 0x00010000, 0x00100000, 0x01111111, // M
  0x01111111, 0x00100000, 0x00010000, 0x00001000, 0x01111111, // N
  0x00111110, 0x01000001, 0x01000001, 0x01000001, 0x00111110, // O
  0x01111111, 0x01001000, 0x01001000, 0x01001000, 0x00110000, // P
  0x00111110, 0x01000001, 0x01000101, 0x01000011, 0x00111111, // Q
  0x01111111, 0x01001000, 0x01001100, 0x01001010, 0x00110001, // R
  0x00110010, 0x01001001, 0x01001001, 0x01001001, 0x00100110, // S
  0x01000000, 0x01000000, 0x01111111, 0x01000000, 0x01000000, // T
  0x01111110, 0x00000001, 0x00000001, 0x00000001, 0x01111110, // U
  0x01111100, 0x00000010, 0x00000001, 0x00000010, 0x01111100, // V
  0x01111111, 0x00000010, 0x00001100, 0x00000010, 0x01111111, // W
  0x01100011, 0x00010100, 0x00001000, 0x00010100, 0x01100011, // X
  0x01100000, 0x00010000, 0x00001111, 0x00010000, 0x01100000, // Y
  0x01000011, 0x01000101, 0x01001001, 0x01010001, 0x01100001  // Z
};


void setup() {
  setupPrinter(GBIn, GBOut, GBClock);
  Serial.begin(9600);
  Serial.println("Gameboy Printer for Arduino");
}

void loop() {
  //serialCommand = Serial.read();
  cmd = Serial.read();

  // connection Test
  if (cmd == '?') {

    if (sendInitialize()) {
      getStatusCode();
      Serial.print('1');
    } 
    else {
      Serial.print('0');
    }
  }

// Data Out flush row data set 4 times
  if(cmd == 'g') {
    Serial.println("Init");        
    sendInitialize();
    getStatusCode();

    for (int j=0; j<4; j++) {
      // each row is started like this
      sendRow(row);
      // and ends like this
    }
    
    Serial.println("Inq");        
    sendInquiry();
    
    Serial.println("Data"); 
    GBPCommand(GBData,0);
    printStatusCode(-1);
    Serial.println("Print");
    sendPrint(1,3,0xE4,0x40);
    printStatusCode(-1);
  }
}

void printText (String c) {
  uint8_t printRow[640];
  for (int i = 0; i<c.length(); i++) {
    if (c[i]>64 && c[i]<91) {
      // insert super code here    
    }
  }
  Serial.println("Init");        
  sendInitialize();
  getStatusCode();
  sendRow(printRow);
  Serial.println("Inq");
  sendInquiry();
  Serial.println("Data"); 
  GBPCommand(GBData,0);
  printStatusCode(-1);
  Serial.println("Print");
  sendPrint(1,3,0xE4,0x40);
  printStatusCode(-1);
}

void sendRow (uint8_t row2send[]) {
    CRC = 0;
    Serial.println("Data");
    CRC += beginData();
    for(int i=0; i<640; ++i) {
      uint8_t cmd = row2send[i];
      CRC += cmd;
      GBSerialOut(cmd);
    }

    if(endData(CRC)) //0x27E06
    { 
      Serial.println("Data sent");
    }
    printStatusCode(-1);
}
